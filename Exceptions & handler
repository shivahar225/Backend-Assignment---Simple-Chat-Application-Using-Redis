// exception/ApiException.java
package com.example.chat.exception;
public class ApiException extends RuntimeException {
  public ApiException(String m){ super(m); }
}

// exception/NotFoundException.java
package com.example.chat.exception;
public class NotFoundException extends ApiException {
  public NotFoundException(String m){ super(m); }
}

// exception/ConflictException.java
package com.example.chat.exception;
public class ConflictException extends ApiException {
  public ConflictException(String m){ super(m); }
}

// exception/GlobalExceptionHandler.java
package com.example.chat.exception;

import org.springframework.http.*;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler(ConflictException.class)
  public ResponseEntity<Map<String,Object>> conflict(ConflictException ex){
    return ResponseEntity.status(HttpStatus.CONFLICT)
      .body(Map.of("status","error","message",ex.getMessage()));
  }

  @ExceptionHandler(NotFoundException.class)
  public ResponseEntity<Map<String,Object>> notFound(NotFoundException ex){
    return ResponseEntity.status(HttpStatus.NOT_FOUND)
      .body(Map.of("status","error","message",ex.getMessage()));
  }

  @ExceptionHandler(MethodArgumentNotValidException.class)
  public ResponseEntity<Map<String,Object>> badReq(MethodArgumentNotValidException ex){
    return ResponseEntity.badRequest()
      .body(Map.of("status","error","message","Validation failed"));
  }

  @ExceptionHandler(Exception.class)
  public ResponseEntity<Map<String,Object>> server(Exception ex){
    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
      .body(Map.of("status","error","message","Internal error"));
  }
}
